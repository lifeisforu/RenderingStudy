#pragma once

#include "Platform/PlatformWindows.h"
#include "Platform/ComPointer.h"

//-----------------------------------------------------------------------------
// Foward Declaration
//-----------------------------------------------------------------------------

class DXDebugLayer;

//-----------------------------------------------------------------------------
// constants
//-----------------------------------------------------------------------------

/// known d3d feature levels.
constexpr D3D_FEATURE_LEVEL gKnownFeatureLevels[] =
{
	D3D_FEATURE_LEVEL_1_0_CORE,
	D3D_FEATURE_LEVEL_9_1,
	D3D_FEATURE_LEVEL_9_2,
	D3D_FEATURE_LEVEL_9_3,
	D3D_FEATURE_LEVEL_10_0,
	D3D_FEATURE_LEVEL_10_1,
	D3D_FEATURE_LEVEL_11_0,
	D3D_FEATURE_LEVEL_11_1,
	D3D_FEATURE_LEVEL_12_0,
	D3D_FEATURE_LEVEL_12_1,
	D3D_FEATURE_LEVEL_12_2
};

/// number of known feature levels.
constexpr int32 gNumKnownFeatureLevels = sizeof(gKnownFeatureLevels) / sizeof(D3D_FEATURE_LEVEL);

/// known dxgi formats.
constexpr DXGI_FORMAT gKnownDXGIFormats[] = 
{
	DXGI_FORMAT_UNKNOWN,
	DXGI_FORMAT_R32G32B32A32_TYPELESS,
	DXGI_FORMAT_R32G32B32A32_FLOAT,
	DXGI_FORMAT_R32G32B32A32_UINT,
	DXGI_FORMAT_R32G32B32A32_SINT,
	DXGI_FORMAT_R32G32B32_TYPELESS,
	DXGI_FORMAT_R32G32B32_FLOAT,
	DXGI_FORMAT_R32G32B32_UINT,
	DXGI_FORMAT_R32G32B32_SINT,
	DXGI_FORMAT_R16G16B16A16_TYPELESS,
	DXGI_FORMAT_R16G16B16A16_FLOAT,
	DXGI_FORMAT_R16G16B16A16_UNORM,
	DXGI_FORMAT_R16G16B16A16_UINT,
	DXGI_FORMAT_R16G16B16A16_SNORM,
	DXGI_FORMAT_R16G16B16A16_SINT,
	DXGI_FORMAT_R32G32_TYPELESS,
	DXGI_FORMAT_R32G32_FLOAT,
	DXGI_FORMAT_R32G32_UINT,
	DXGI_FORMAT_R32G32_SINT,
	DXGI_FORMAT_R32G8X24_TYPELESS,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
	DXGI_FORMAT_R10G10B10A2_TYPELESS,
	DXGI_FORMAT_R10G10B10A2_UNORM,
	DXGI_FORMAT_R10G10B10A2_UINT,
	DXGI_FORMAT_R11G11B10_FLOAT,
	DXGI_FORMAT_R8G8B8A8_TYPELESS,
	DXGI_FORMAT_R8G8B8A8_UNORM,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
	DXGI_FORMAT_R8G8B8A8_UINT,
	DXGI_FORMAT_R8G8B8A8_SNORM,
	DXGI_FORMAT_R8G8B8A8_SINT,
	DXGI_FORMAT_R16G16_TYPELESS,
	DXGI_FORMAT_R16G16_FLOAT,
	DXGI_FORMAT_R16G16_UNORM,
	DXGI_FORMAT_R16G16_UINT,
	DXGI_FORMAT_R16G16_SNORM,
	DXGI_FORMAT_R16G16_SINT,
	DXGI_FORMAT_R32_TYPELESS,
	DXGI_FORMAT_D32_FLOAT,
	DXGI_FORMAT_R32_FLOAT,
	DXGI_FORMAT_R32_UINT,
	DXGI_FORMAT_R32_SINT,
	DXGI_FORMAT_R24G8_TYPELESS,
	DXGI_FORMAT_D24_UNORM_S8_UINT,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT,
	DXGI_FORMAT_R8G8_TYPELESS,
	DXGI_FORMAT_R8G8_UNORM,
	DXGI_FORMAT_R8G8_UINT,
	DXGI_FORMAT_R8G8_SNORM,
	DXGI_FORMAT_R8G8_SINT,
	DXGI_FORMAT_R16_TYPELESS,
	DXGI_FORMAT_R16_FLOAT,
	DXGI_FORMAT_D16_UNORM,
	DXGI_FORMAT_R16_UNORM,
	DXGI_FORMAT_R16_UINT,
	DXGI_FORMAT_R16_SNORM,
	DXGI_FORMAT_R16_SINT,
	DXGI_FORMAT_R8_TYPELESS,
	DXGI_FORMAT_R8_UNORM,
	DXGI_FORMAT_R8_UINT,
	DXGI_FORMAT_R8_SNORM,
	DXGI_FORMAT_R8_SINT,
	DXGI_FORMAT_A8_UNORM,
	DXGI_FORMAT_R1_UNORM,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
	DXGI_FORMAT_R8G8_B8G8_UNORM,
	DXGI_FORMAT_G8R8_G8B8_UNORM,
	DXGI_FORMAT_BC1_TYPELESS,
	DXGI_FORMAT_BC1_UNORM,
	DXGI_FORMAT_BC1_UNORM_SRGB,
	DXGI_FORMAT_BC2_TYPELESS,
	DXGI_FORMAT_BC2_UNORM,
	DXGI_FORMAT_BC2_UNORM_SRGB,
	DXGI_FORMAT_BC3_TYPELESS,
	DXGI_FORMAT_BC3_UNORM,
	DXGI_FORMAT_BC3_UNORM_SRGB,
	DXGI_FORMAT_BC4_TYPELESS,
	DXGI_FORMAT_BC4_UNORM,
	DXGI_FORMAT_BC4_SNORM,
	DXGI_FORMAT_BC5_TYPELESS,
	DXGI_FORMAT_BC5_UNORM,
	DXGI_FORMAT_BC5_SNORM,
	DXGI_FORMAT_B5G6R5_UNORM,
	DXGI_FORMAT_B5G5R5A1_UNORM,
	DXGI_FORMAT_B8G8R8A8_UNORM,
	DXGI_FORMAT_B8G8R8X8_UNORM,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
	DXGI_FORMAT_B8G8R8A8_TYPELESS,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
	DXGI_FORMAT_B8G8R8X8_TYPELESS,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
	DXGI_FORMAT_BC6H_TYPELESS,
	DXGI_FORMAT_BC6H_UF16,
	DXGI_FORMAT_BC6H_SF16,
	DXGI_FORMAT_BC7_TYPELESS,
	DXGI_FORMAT_BC7_UNORM,
	DXGI_FORMAT_BC7_UNORM_SRGB,
	DXGI_FORMAT_AYUV,
	DXGI_FORMAT_Y410,
	DXGI_FORMAT_Y416,
	DXGI_FORMAT_NV12,
	DXGI_FORMAT_P010,
	DXGI_FORMAT_P016,
	DXGI_FORMAT_420_OPAQUE,
	DXGI_FORMAT_YUY2,
	DXGI_FORMAT_Y210,
	DXGI_FORMAT_Y216,
	DXGI_FORMAT_NV11,
	DXGI_FORMAT_AI44,
	DXGI_FORMAT_IA44,
	DXGI_FORMAT_P8,
	DXGI_FORMAT_A8P8,
	DXGI_FORMAT_B4G4R4A4_UNORM,

	DXGI_FORMAT_P208,
	DXGI_FORMAT_V208,
	DXGI_FORMAT_V408,


	DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
	DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,

	DXGI_FORMAT_FORCE_UINT
};

/// number of known dxgi formats.
constexpr int32 gNumKnownDXGIFormats = sizeof(gKnownDXGIFormats) / sizeof(DXGI_FORMAT);

/// known dxgi format names.
constexpr const TCHAR* gKnownDXGIFormatNames[gNumKnownDXGIFormats] =
{
	TEXT("DXGI_FORMAT_UNKNOWN"),
	TEXT("DXGI_FORMAT_R32G32B32A32_TYPELESS"),
	TEXT("DXGI_FORMAT_R32G32B32A32_FLOAT"),
	TEXT("DXGI_FORMAT_R32G32B32A32_UINT"),
	TEXT("DXGI_FORMAT_R32G32B32A32_SINT"),
	TEXT("DXGI_FORMAT_R32G32B32_TYPELESS"),
	TEXT("DXGI_FORMAT_R32G32B32_FLOAT"),
	TEXT("DXGI_FORMAT_R32G32B32_UINT"),
	TEXT("DXGI_FORMAT_R32G32B32_SINT"),
	TEXT("DXGI_FORMAT_R16G16B16A16_TYPELESS"),
	TEXT("DXGI_FORMAT_R16G16B16A16_FLOAT"),
	TEXT("DXGI_FORMAT_R16G16B16A16_UNORM"),
	TEXT("DXGI_FORMAT_R16G16B16A16_UINT"),
	TEXT("DXGI_FORMAT_R16G16B16A16_SNORM"),
	TEXT("DXGI_FORMAT_R16G16B16A16_SINT"),
	TEXT("DXGI_FORMAT_R32G32_TYPELESS"),
	TEXT("DXGI_FORMAT_R32G32_FLOAT"),
	TEXT("DXGI_FORMAT_R32G32_UINT"),
	TEXT("DXGI_FORMAT_R32G32_SINT"),
	TEXT("DXGI_FORMAT_R32G8X24_TYPELESS"),
	TEXT("DXGI_FORMAT_D32_FLOAT_S8X24_UINT"),
	TEXT("DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS"),
	TEXT("DXGI_FORMAT_X32_TYPELESS_G8X24_UINT"),
	TEXT("DXGI_FORMAT_R10G10B10A2_TYPELESS"),
	TEXT("DXGI_FORMAT_R10G10B10A2_UNORM"),
	TEXT("DXGI_FORMAT_R10G10B10A2_UINT"),
	TEXT("DXGI_FORMAT_R11G11B10_FLOAT"),
	TEXT("DXGI_FORMAT_R8G8B8A8_TYPELESS"),
	TEXT("DXGI_FORMAT_R8G8B8A8_UNORM"),
	TEXT("DXGI_FORMAT_R8G8B8A8_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_R8G8B8A8_UINT"),
	TEXT("DXGI_FORMAT_R8G8B8A8_SNORM"),
	TEXT("DXGI_FORMAT_R8G8B8A8_SINT"),
	TEXT("DXGI_FORMAT_R16G16_TYPELESS"),
	TEXT("DXGI_FORMAT_R16G16_FLOAT"),
	TEXT("DXGI_FORMAT_R16G16_UNORM"),
	TEXT("DXGI_FORMAT_R16G16_UINT"),
	TEXT("DXGI_FORMAT_R16G16_SNORM"),
	TEXT("DXGI_FORMAT_R16G16_SINT"),
	TEXT("DXGI_FORMAT_R32_TYPELESS"),
	TEXT("DXGI_FORMAT_D32_FLOAT"),
	TEXT("DXGI_FORMAT_R32_FLOAT"),
	TEXT("DXGI_FORMAT_R32_UINT"),
	TEXT("DXGI_FORMAT_R32_SINT"),
	TEXT("DXGI_FORMAT_R24G8_TYPELESS"),
	TEXT("DXGI_FORMAT_D24_UNORM_S8_UINT"),
	TEXT("DXGI_FORMAT_R24_UNORM_X8_TYPELESS"),
	TEXT("DXGI_FORMAT_X24_TYPELESS_G8_UINT"),
	TEXT("DXGI_FORMAT_R8G8_TYPELESS"),
	TEXT("DXGI_FORMAT_R8G8_UNORM"),
	TEXT("DXGI_FORMAT_R8G8_UINT"),
	TEXT("DXGI_FORMAT_R8G8_SNORM"),
	TEXT("DXGI_FORMAT_R8G8_SINT"),
	TEXT("DXGI_FORMAT_R16_TYPELESS"),
	TEXT("DXGI_FORMAT_R16_FLOAT"),
	TEXT("DXGI_FORMAT_D16_UNORM"),
	TEXT("DXGI_FORMAT_R16_UNORM"),
	TEXT("DXGI_FORMAT_R16_UINT"),
	TEXT("DXGI_FORMAT_R16_SNORM"),
	TEXT("DXGI_FORMAT_R16_SINT"),
	TEXT("DXGI_FORMAT_R8_TYPELESS"),
	TEXT("DXGI_FORMAT_R8_UNORM"),
	TEXT("DXGI_FORMAT_R8_UINT"),
	TEXT("DXGI_FORMAT_R8_SNORM"),
	TEXT("DXGI_FORMAT_R8_SINT"),
	TEXT("DXGI_FORMAT_A8_UNORM"),
	TEXT("DXGI_FORMAT_R1_UNORM"),
	TEXT("DXGI_FORMAT_R9G9B9E5_SHAREDEXP"),
	TEXT("DXGI_FORMAT_R8G8_B8G8_UNORM"),
	TEXT("DXGI_FORMAT_G8R8_G8B8_UNORM"),
	TEXT("DXGI_FORMAT_BC1_TYPELESS"),
	TEXT("DXGI_FORMAT_BC1_UNORM"),
	TEXT("DXGI_FORMAT_BC1_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_BC2_TYPELESS"),
	TEXT("DXGI_FORMAT_BC2_UNORM"),
	TEXT("DXGI_FORMAT_BC2_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_BC3_TYPELESS"),
	TEXT("DXGI_FORMAT_BC3_UNORM"),
	TEXT("DXGI_FORMAT_BC3_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_BC4_TYPELESS"),
	TEXT("DXGI_FORMAT_BC4_UNORM"),
	TEXT("DXGI_FORMAT_BC4_SNORM"),
	TEXT("DXGI_FORMAT_BC5_TYPELESS"),
	TEXT("DXGI_FORMAT_BC5_UNORM"),
	TEXT("DXGI_FORMAT_BC5_SNORM"),
	TEXT("DXGI_FORMAT_B5G6R5_UNORM"),
	TEXT("DXGI_FORMAT_B5G5R5A1_UNORM"),
	TEXT("DXGI_FORMAT_B8G8R8A8_UNORM"),
	TEXT("DXGI_FORMAT_B8G8R8X8_UNORM"),
	TEXT("DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM"),
	TEXT("DXGI_FORMAT_B8G8R8A8_TYPELESS"),
	TEXT("DXGI_FORMAT_B8G8R8A8_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_B8G8R8X8_TYPELESS"),
	TEXT("DXGI_FORMAT_B8G8R8X8_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_BC6H_TYPELESS"),
	TEXT("DXGI_FORMAT_BC6H_UF16"),
	TEXT("DXGI_FORMAT_BC6H_SF16"),
	TEXT("DXGI_FORMAT_BC7_TYPELESS"),
	TEXT("DXGI_FORMAT_BC7_UNORM"),
	TEXT("DXGI_FORMAT_BC7_UNORM_SRGB"),
	TEXT("DXGI_FORMAT_AYUV"),
	TEXT("DXGI_FORMAT_Y410"),
	TEXT("DXGI_FORMAT_Y416"),
	TEXT("DXGI_FORMAT_NV12"),
	TEXT("DXGI_FORMAT_P010"),
	TEXT("DXGI_FORMAT_P016"),
	TEXT("DXGI_FORMAT_420_OPAQUE"),
	TEXT("DXGI_FORMAT_YUY2"),
	TEXT("DXGI_FORMAT_Y210"),
	TEXT("DXGI_FORMAT_Y216"),
	TEXT("DXGI_FORMAT_NV11"),
	TEXT("DXGI_FORMAT_AI44"),
	TEXT("DXGI_FORMAT_IA44"),
	TEXT("DXGI_FORMAT_P8"),
	TEXT("DXGI_FORMAT_A8P8"),
	TEXT("DXGI_FORMAT_B4G4R4A4_UNORM"),

	TEXT("DXGI_FORMAT_P208"),
	TEXT("DXGI_FORMAT_V208"),
	TEXT("DXGI_FORMAT_V408"),


	TEXT("DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE"),
	TEXT("DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE"),

	TEXT("DXGI_FORMAT_FORCE_UINT")
};

/// known shader models.
constexpr D3D_SHADER_MODEL gKnownShaderModels[] =
{
	D3D_SHADER_MODEL_5_1,
	D3D_SHADER_MODEL_6_0,
	D3D_SHADER_MODEL_6_1,
	D3D_SHADER_MODEL_6_2,
	D3D_SHADER_MODEL_6_3,
	D3D_SHADER_MODEL_6_4,
	D3D_SHADER_MODEL_6_5,
	D3D_SHADER_MODEL_6_6,
	D3D_SHADER_MODEL_6_7
};

/// number of known shader models.
constexpr int32 gNumKnownShaderModels = sizeof(gKnownShaderModels) / sizeof(D3D_SHADER_MODEL);

/// known shader model names.
constexpr const TCHAR* gKnownShaderModelNames[] =
{
	TEXT("D3D_SHADER_MODEL_5_1"),
	TEXT("D3D_SHADER_MODEL_6_0"),
	TEXT("D3D_SHADER_MODEL_6_1"),
	TEXT("D3D_SHADER_MODEL_6_2"),
	TEXT("D3D_SHADER_MODEL_6_3"),
	TEXT("D3D_SHADER_MODEL_6_4"),
	TEXT("D3D_SHADER_MODEL_6_5"),
	TEXT("D3D_SHADER_MODEL_6_6"),
	TEXT("D3D_SHADER_MODEL_6_7")
};

/// known d3d12 command list types.
constexpr D3D12_COMMAND_LIST_TYPE gKnownCommandListTypes[] = 
{
	D3D12_COMMAND_LIST_TYPE_DIRECT,
	D3D12_COMMAND_LIST_TYPE_BUNDLE,
	D3D12_COMMAND_LIST_TYPE_COMPUTE,
	D3D12_COMMAND_LIST_TYPE_COPY,
	D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE,
	D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS,
	D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE
};

/// number of known shader models.
constexpr int32 gNumKnownCommandListTypes = sizeof(gKnownCommandListTypes) / sizeof(D3D12_COMMAND_LIST_TYPE);

// known d3d12 command list types.
constexpr const TCHAR* gKnownCommandListTypeNames[] =
{
	TEXT("D3D12_COMMAND_LIST_TYPE_DIRECT"),
	TEXT("D3D12_COMMAND_LIST_TYPE_BUNDLE"),
	TEXT("D3D12_COMMAND_LIST_TYPE_COMPUTE"),
	TEXT("D3D12_COMMAND_LIST_TYPE_COPY"),
	TEXT("D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE"),
	TEXT("D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS"),
	TEXT("D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE")
};

//-----------------------------------------------------------------------------
// global functions
//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
// FeaturesD3D12
//-----------------------------------------------------------------------------

/// wrap D3D12_FEATURE_DATA_XXXs
struct DeviceFeatures
{
	#define DECLARE_FEATURE_DATA(InName) D3D12_FEATURE_DATA_ ##InName _ ##InName

	DECLARE_FEATURE_DATA(D3D12_OPTIONS);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS1);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS2);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS3);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS4);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS5);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS6);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS7);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS8);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS9);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS10);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS11);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS12);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS13);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS19);
	DECLARE_FEATURE_DATA(D3D12_OPTIONS20);
	DECLARE_FEATURE_DATA(ARCHITECTURE);
	DECLARE_FEATURE_DATA(ARCHITECTURE1);
	DECLARE_FEATURE_DATA(FEATURE_LEVELS);
	TMap<DXGI_FORMAT, D3D12_FEATURE_DATA_FORMAT_SUPPORT> _FormatSupportMap; ///< format support per format.
	TMap<DXGI_FORMAT, D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS> _MultiSampleQualityLevelMap; ///< multi-sample quality levels per format.
	TMap<DXGI_FORMAT, D3D12_FEATURE_DATA_FORMAT_INFO> _FormatInfoMap; ///< format info per format.
	DECLARE_FEATURE_DATA(GPU_VIRTUAL_ADDRESS_SUPPORT);
	TMap<D3D_SHADER_MODEL, bool> _ShaderModelSupportMap; ///< support per shader model.
	DECLARE_FEATURE_DATA(PROTECTED_RESOURCE_SESSION_SUPPORT);
	DECLARE_FEATURE_DATA(ROOT_SIGNATURE);
	DECLARE_FEATURE_DATA(SHADER_CACHE);
	TMap<D3D12_COMMAND_LIST_TYPE, bool> _CommandQueuePriority0SupportMap; ///< command queue priority support for priority 0.
	DECLARE_FEATURE_DATA(EXISTING_HEAPS);
	DECLARE_FEATURE_DATA(SERIALIZATION);
	DECLARE_FEATURE_DATA(CROSS_NODE);
	DECLARE_FEATURE_DATA(DISPLAYABLE);
	DECLARE_FEATURE_DATA(QUERY_META_COMMAND);
	DECLARE_FEATURE_DATA(PROTECTED_RESOURCE_SESSION_TYPE_COUNT);
	DECLARE_FEATURE_DATA(PROTECTED_RESOURCE_SESSION_TYPES);
	TArray<GUID> _ProtectedSessionTypeGUIDs;

	#undef DECLARE_FEATURE_DATA
};

//-----------------------------------------------------------------------------
// RendererD3D12
//-----------------------------------------------------------------------------

/// render using D3D12.
class RendererD3D12
{
public:

	/// default constructor.
	RendererD3D12();

	/// destructor.
	~RendererD3D12();

	/// create debug layer.
	/// @return true if succeeded.
	bool CreateDebugLayer();

	/// create dxgi factory.
	/// @return true if succeeded.
	bool CreateDXGIFactory();

	/// enumerate dxgi adapters.
	/// @return adapters.
	TArray<DXGI_ADAPTER_DESC> EnumerateAdapters();

	/// select adapter.
	/// @return true if succeeded.
	bool SelectAdapter(const uint32 InAdapterIndex);

	/// create adapter by preference.
	/// @param InFeatureLevel feature level.
	/// @return true if succeeded.
	bool SelectAdapterByPreference(const DXGI_GPU_PREFERENCE InPreference);

	/// enumerate feature levels.
	/// @return feature levels.
	TArray<D3D_FEATURE_LEVEL> EnumerateFeatureLevels();

	/// create device.
	/// @param InFeatureLevel feature level.
	/// @return true if succeeded.
	bool CreateDevice(const D3D_FEATURE_LEVEL InFeatureLevel);

private:

	/// check features of device.
	void _CheckFeatures();

private:

	/// feature level.
	D3D_FEATURE_LEVEL _FeatureLevelD3D = D3D_FEATURE_LEVEL_1_0_CORE;

	/// Back buffer format.
	DXGI_FORMAT _BackBufferFormatDXGI = DXGI_FORMAT_R16G16B16A16_FLOAT;

	/// features of device.
	DeviceFeatures _DeviceFeatures;

	/// D3D12 device.
	ComPointer<ID3D12Device10> _DeviceD3D12;

	/// DXGI adapter.
	ComPointer<IDXGIAdapter4> _AdapterDXGI;

	/// DXGI factory.
	ComPointer<IDXGIFactory7> _FactoryDXGI;

	/// debug layer.
	TUniquePtr<DXDebugLayer> _DebugLayerPtr;
};